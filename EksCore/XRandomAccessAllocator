#ifndef XRANDOMACCESSBLOCKALLOCATOR_H
#define XRANDOMACCESSBLOCKALLOCATOR_H

#include "XGlobal"
#include "XHash"

#define Bit(index) 1 << index
#define Bits1To8   0x000000FF
#define Bits9To16  0x0000FF00
#define Bits17To24 0x00FF0000
#define Bits25To32 0xFF000000
#define FullMask (Bits1To8|Bits9To16|Bits17To24|Bits25To32)

class XRandomAccessFixedSizeBlock
  {
public:
  XRandomAccessFixedSizeBlock(xsize objectSize, xsize count) : _count(count), _size(objectSize)
    {
    xAssert((count % 32) == 0);
    _memory = new xuint8[_count*_size + (_count / 8)];
    _masks = (xuint32*)((xuint8*)_memory + (_count*_size));

    for(xsize i=0, s=(_count/32); i<s; ++i)
      {
      _masks[i] = 0;
      }
    }
  ~XRandomAccessFixedSizeBlock()
    {
    delete [] _memory;
    }
  void *alloc()
    {
    xuint32 mask = 0;
    for(xsize i=0, s=(_count/32); i<s; ++i)
      {
      mask = _masks[i];
      if(mask != FullMask)
        {
        xuint8 spareBit = 0;
        if((mask&Bits1To8) != Bits1To8)
          {
          // spare in 1-8
          spareBit = findFirstSpareBit(mask);
          }
        else if((mask&Bits9To16) != Bits9To16)
          {
          // spare in 9-16
          spareBit = findFirstSpareBit(mask >> 8) + 8;
          }
        else if((mask&Bits17To24) != Bits17To24)
          {
          // spare in 17-24
          spareBit = findFirstSpareBit(mask >> 16) + 16;
          }
        else
          {
          // spare in 25-32
          spareBit = findFirstSpareBit(mask >> 24) + 24;
          }

        // mark spareBit as used.
        _masks[i] = mask|(1<<spareBit);
        return (void*)&(_memory[_size*((i*32)+spareBit)]);
        }
      }
    return 0;
    }
  bool free(void *ptr)
    {
    if(ptr >= _memory && ptr < (_memory + (_count*_size)))
      {
      // always positive
      xsize index = ( (char*)ptr - (char*)_memory ) / _size;
      xsize block = index / 32;
      xsize blockIndex = index % 32;

      xAssert((_masks[block]&(1<<blockIndex)) != false);

      // set to 0
      _masks[block] = ~((~_masks[block])|(1<<blockIndex));
      xAssert((_masks[block]&(1<<blockIndex)) == false);

      return true;
      }
    return false;
    }
  bool empty() const
    {
    for(xsize i=0, s=(_count/32); i<s; ++i)
      {
      if(_masks[i] != 0)
        {
        return false;
        }
      }
    return true;
    }

private:
  xuint8 findFirstSpareBit(xuint8 mask)
    {
    for(xuint8 i=0; i<8; ++i)
      {
      if((Bit(i)&mask) == false)
        {
        return i;
        }
      }
    xAssert(0);
    return 8;
    }

  xsize _count;
  xsize _size;
  xuint32 *_masks;
  xuint8 *_memory;
  };

class XRandomAccessFixedSizeAllocator
  {
public:
  XRandomAccessFixedSizeAllocator(xsize s, xsize d=128, xsize e=1024) : _freeIndex(0),
      _size(s), _defaultSize(d), _expandSize(e)
    {
  _internal.reserve(d);
  XRandomAccessFixedSizeBlock* newBlock = new XRandomAccessFixedSizeBlock(_size, _defaultSize);
  _internal << newBlock;
  }

  void *alloc()
    {
    void *newMem = 0;
    for(int i=_freeIndex, s=_internal.size(); i<s; ++i)
      {
      newMem = _internal[i]->alloc();
      if(newMem)
        {
        return newMem;
        }
      else
        {
        _freeIndex = i + 1;
        }
      }

    XRandomAccessFixedSizeBlock* newBlock = new XRandomAccessFixedSizeBlock(_size, _expandSize);
    _internal << newBlock;
    return newBlock->alloc();
    }
  bool free(void *ptr)
    {
    for(int i=0, s=_internal.size(); i<s; ++i)
      {
      if(_internal[i]->free(ptr))
        {
        if(_freeIndex > (xsize)i)
          {
          _freeIndex = (xsize)i;
          }
        return true;
        }
      }
    return false;
    }
  bool empty() const
    {
    foreach(XRandomAccessFixedSizeBlock *ptr, _internal)
      {
      if(!ptr->empty())
        {
        return false;
        }
      }
    return true;
    }

private:
  X_DISABLE_COPY(XRandomAccessFixedSizeAllocator);
  xsize _freeIndex;
  xsize _size;
  xsize _defaultSize;
  xsize _expandSize;
  XVector <XRandomAccessFixedSizeBlock *> _internal;
  };

class XRandomAccessAllocator
  {
public:
  XRandomAccessAllocator(xsize d=128, xsize e=1024) : _defaultSize(d),
      _expandSize(e)
    {
    }
  ~XRandomAccessAllocator()
    {
    foreach(XRandomAccessFixedSizeAllocator *ptr, _internal.values())
      {
      delete ptr;
      }
    }
  void *alloc(xsize size)
    {
    xsize index = size + sizeof(xsize);
    if(!_internal.contains(index))
      {
      _internal.insert(index, new XRandomAccessFixedSizeAllocator(index, _defaultSize, _expandSize));
      }
    xsize *allocted = (xsize *)_internal[index]->alloc();

    allocted[0] = index;

    return allocted + 1;
    }
  void free(void *ptr)
    {
    xsize *del = ((xsize *)ptr) - 1;
    xAssert(_internal[*del]);
    xAssert(_internal[*del]->free(del));
    }
  bool empty() const
    {
    foreach(XRandomAccessFixedSizeAllocator *ptr, _internal.values())
      {
      if(!ptr->empty())
        {
        return false;
        }
      }
    return true;
    }

private:
  X_DISABLE_COPY(XRandomAccessAllocator);
  xsize _defaultSize;
  xsize _expandSize;
  XHash<xsize, XRandomAccessFixedSizeAllocator *> _internal;
  };

#endif // XRANDOMACCESSBLOCKALLOCATOR_H
